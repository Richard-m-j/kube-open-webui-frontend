# This is the name of the consolidated workflow.
name: CI & CD Pipeline

# Triggers the workflow on push or pull request events but only for the "main" branch.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # JOB 1: Lints the code and verifies the application builds successfully.
  lint-and-build:
    name: Lint & Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm' # Enables caching for faster dependency installation

    - name: Install dependencies
      run: npm ci

    - name: Lint code
      run: npm run lint

    - name: Build application
      run: npm run build

  # JOB 2: Runs security scans for vulnerable dependencies (SCA) and secrets.
  security-scans:
    name: Security Scans (SCA & Secrets)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Software Component Analysis (SCA)
      run: npm audit --audit-level=high

    - name: Static Application Security Testing (SAST) with Gitleaks
      uses: gitleaks/gitleaks-action@v2
      with:
        config-path: .gitleaks.toml

  # JOB 3: Performs in-depth static analysis with CodeQL.
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript-typescript # Specific language for analysis

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript-typescript"

  # JOB 4: Builds, pushes Docker image, and updates the Kubernetes manifest.
  build-push-and-update-manifest:
    name: Build, Push & Update Manifest
    runs-on: ubuntu-latest
    
    # Define dependencies: This job waits for the CI jobs to be successful.
    needs: [lint-and-build, security-scans, codeql-analysis]
    
    # Define condition: This job only runs for push events on the main branch.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    # Add permissions to allow the job to commit back to the repository.
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: richardjoseph1
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        # CHANGED: Tag the image with the short commit SHA instead of 'latest'.
        tags: richardjoseph1/modelmanager-frontend-kube-openwebui:${{ github.sha }}

    - name: Update deployment manifest
      # ADDED: This step updates the image tag in your deployment file.
      # IMPORTANT: Please verify the path to your frontend deployment file is correct.
      run: |
        sed -i "s|image: .*|image: richardjoseph1/modelmanager-frontend-kube-openwebui:${{ github.sha }}|g" kubernetes/02-frontend-deployment.yml

    - name: Commit and push manifest changes
      # ADDED: This step commits the updated manifest file back to your main branch.
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add kubernetes/02-frontend-deployment.yml # Verify this path is correct
        git diff --staged --quiet || git commit -m "CI: Update image tag to ${{ github.sha }}"
        git push